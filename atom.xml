<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[cat !$ >> blog]]></title>
  <link href="http://yaymukund.github.io/atom.xml" rel="self"/>
  <link href="http://yaymukund.github.io/"/>
  <updated>2014-04-22T09:45:43-04:00</updated>
  <id>http://yaymukund.github.io/</id>
  <author>
    <name><![CDATA[Mukund Lakshman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ember.js authentication without injections]]></title>
    <link href="http://yaymukund.github.io/blog/2014/04/21/emberjs-authentication-without-injections/"/>
    <updated>2014-04-21T00:00:00-04:00</updated>
    <id>http://yaymukund.github.io/blog/2014/04/21/emberjs-authentication-without-injections</id>
    <content type="html"><![CDATA[<p>I had a simple Ember app where I wanted to add authentication. My
requirements were thus:</p>

<ul>
<li>A <code>session</code> object available to the rest of my application.</li>
<li>A <code>/login</code> route that calls <code>POST /session</code>.</li>
<li>Load the <code>user</code> object through a <code>&lt;meta&gt;</code> tag if one exists.</li>
</ul>

<h2>What are my options?</h2>

<p>I first looked through some existing examples and libraries. Most of them
use the <a href="injections-api">injections API</a> to expose the session object. There
are only a few points in my app that interact with the session, so the
injections seem like overkill.</p>

<h2>Store the session in a controller</h2>

<p>The Ember API documentation advises:</p>

<blockquote><p>In general, your models will have properties that are saved to the server,<br/>while controllers will have properties that your app does not need to save to<br/>the server.</p><footer><strong>Ember.js Guides</strong> <cite><a href='http://emberjs.com/guides/controllers/'>emberjs.com/guides/controllers/&hellip;</a></cite></footer></blockquote>

<p>Okay, great, what does this look like?</p>

<figure class='code'><figcaption><span>app/controllers/session.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">user</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">isAuthenticated</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">computed</span><span class="p">.</span><span class="nx">notEmpty</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">loadUser</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Load JSON into the store.</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">pushPayload</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="nx">payload</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Fetch the user we just loaded without triggering a GET.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">getById</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>To fetch the session from a route, <a href="controller-for">use controllerFor</a>
(<code>this.controllerFor(&#39;session&#39;)</code>). To fetch the session from a controller,
<a href="needs-api">use the needs API</a> (<code>needs: [&#39;session&#39;]</code>).</p>

<h2>Add a login route and authenticate method.</h2>

<p>Once we have this architecture, stuff seems to fall into place. The route is
a standard route that defines a single authenticate action. Note that the
login and password are neatly kept within the route&rsquo;s controller.</p>

<figure class='code'><figcaption><span>app/routes/login.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Redirect if they&#39;re already logged in.</span>
</span><span class='line'>  <span class="nx">beforeModel</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">controllerFor</span><span class="p">(</span><span class="s1">&#39;session&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;isAuthenticated&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">authenticate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">session</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">controllerFor</span><span class="p">(</span><span class="s1">&#39;session&#39;</span><span class="p">),</span>
</span><span class='line'>          <span class="nx">credentials</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">login</span><span class="o">:</span> <span class="nx">self</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;controller.login&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">password</span><span class="o">:</span> <span class="nx">self</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;controller.password&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/session&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">credentials</span> <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// If a session has a previous transition, retry it. See:</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">//   http://goo.gl/Kh0Yx7</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">transition</span> <span class="o">=</span> <span class="nx">session</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;previousTransition&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">session</span><span class="p">.</span><span class="nx">loadUser</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">transition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">transition</span><span class="p">.</span><span class="nx">retry</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">self</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Loading the session from a <code>&lt;meta&gt;</code> tag</h2>

<p>If the user has an existing session when they load the page, the server might
write a <code>&lt;meta&gt;</code> tag with the current user object. For example:</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;current-user&quot;</span> <span class="na">content=</span><span class="s">&quot;{ user: { id: 1, login: &#39;yaymukund&#39; }}&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>We can load this information when the app starts. We do this by implementing
<code>beforeModel</code> on the <code>ApplicationRoute</code> itself:</p>

<figure class='code'><figcaption><span>app/routes/application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">beforeModel</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">transition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">controllerFor</span><span class="p">(</span><span class="s1">&#39;session&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">json</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;meta[name=&quot;current-user&quot;]&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">session</span><span class="p">.</span><span class="nx">loadUser</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">json</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Bonus! - Adding an authenticated route</h2>

<p>Now that you have authentication, you can easily restrict access to parts of
your application:</p>

<figure class='code'><figcaption><span>app/routes/members-only.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">beforeModel</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">transition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">controllerFor</span><span class="p">(</span><span class="s1">&#39;session&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">session</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;isAuthenticated&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">session</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;previousTransition&#39;</span><span class="p">,</span> <span class="nx">transition</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">&#39;login&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Since we set <code>previousTransition</code>, the user will be redirected after login.</p>

<h2>References</h2>

<p>Much credit due to <a href="http://alexspeller.com/">Alex Speller</a> for tirelessly
answering my questions on IRC.</p>

<ul>
<li><a href="http://madhatted.com/2013/8/31/emberfest-presentation-complex-architectures-in-ember">Complex Architectures in Ember</a></li>
<li><a href="http://emberjs.com/guides/controllers/dependencies-between-controllers/">Ember.js Guides - The needs API</a></li>
<li><a href="http://emberjs.com/api/classes/Ember.Route.html#method_controllerFor">Ember.js API - controllerFor</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to quickly create a read-only Git repository]]></title>
    <link href="http://yaymukund.github.io/blog/2014/04/10/how-to-quickly-create-a-readonly-git-repository/"/>
    <updated>2014-04-10T00:00:00-04:00</updated>
    <id>http://yaymukund.github.io/blog/2014/04/10/how-to-quickly-create-a-readonly-git-repository</id>
    <content type="html"><![CDATA[<p>Today, I had to share a git repository to an interview candidate. It&rsquo;s a pain
to grant and revoke access via GitHub, so I decided to host it myself.</p>

<p>A cloned copy of a git repository can itself be cloned. To share a repository
easily, just clone it on your webserver:</p>

<figure class='code'><figcaption><span>how-to-create-a-git-repository.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh my-webserver
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>public
</span><span class='line'><span class="nv">$ </span>git clone git@github.com:yaymukund/foo.git --bare foo.git
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>foo.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>foo.git
</span><span class='line'><span class="nv">$ </span>git update-server-info
</span></code></pre></td></tr></table></div></figure>

<p>Now, anyone can clone it:</p>

<figure class='code'><figcaption><span>cloning-a-git-repository.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone http://my-webserver.com/foo.git
</span></code></pre></td></tr></table></div></figure>

<h2>Hey, what&rsquo;s with that <code>update-server-info</code> stuff?</h2>

<p>Good catch! <code>git</code> has &ldquo;smart&rdquo; repositories and &ldquo;dumb&rdquo; repositories. We&rsquo;ve
made a dumb repository, which is useful for quickly sharing code. It&rsquo;s not
a good long-term solution. You cannot push to a &ldquo;dumb&rdquo; repository easily.</p>

<h2>References</h2>

<ul>
<li><a href="http://stackoverflow.com/a/4203210/1207223">Git, WebDAV, and basic web hosting</a></li>
<li><a href="http://git-scm.com/book/en/Git-on-the-Server-Public-Access">Git on the Server - Public Access</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a new app using ember-cli]]></title>
    <link href="http://yaymukund.github.io/blog/2014/04/09/creating-a-new-app-using-embercli/"/>
    <updated>2014-04-09T00:00:00-04:00</updated>
    <id>http://yaymukund.github.io/blog/2014/04/09/creating-a-new-app-using-embercli</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/stefanpenner/ember-cli/">ember-cli</a> is a command-line tool for setting up a new Ember.js
application. Creating an application should be familiar to anyone familiar
with Rails.</p>

<figure class='code'><figcaption><span>creating-a-new-app.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create an app.</span>
</span><span class='line'><span class="nv">$ </span>npm install -g ember-cli
</span><span class='line'><span class="nv">$ </span>ember new myapp
</span><span class='line'>
</span><span class='line'><span class="c"># Build index.html, app.js, app.css to dist/</span>
</span><span class='line'><span class="nv">$ </span>ember build --env &lt;environment&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># Start a watch server.</span>
</span><span class='line'><span class="nv">$ </span>ember server
</span></code></pre></td></tr></table></div></figure>

<p>It produces the following directory structure:</p>

<figure class='code'><figcaption><span>directory-structure.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ tree -L 2
</span><span class='line'>.
</span><span class='line'>├── Brocfile.js        - Used by Broccoli, Ember&#39;s new asset pipeline.
</span><span class='line'>├── api-stub           - Stub routes for tests.
</span><span class='line'>├── app                - Your main Ember application.
</span><span class='line'>├── bower.json         - Specify external dependencies.
</span><span class='line'>├── config
</span><span class='line'>│   └── environment.js - This file produces the `ENV` variable.
</span><span class='line'>├── node_modules
</span><span class='line'>├── package.json
</span><span class='line'>├── public             - Files in this directory get built alongside your app.
</span><span class='line'>├── tests
</span><span class='line'>└── vendor
</span><span class='line'>
</span><span class='line'>28 directories, 16 files
</span></code></pre></td></tr></table></div></figure>

<h2>Connecting to an API server</h2>

<p>The <code>ember server</code> command comes with a useful argument that lets you forward
API requests to your server.</p>

<figure class='code'><figcaption><span>forward-requests-to-localhost-3500.zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Any API requests will be proxied to localhost:3500. For example:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   store.find(&#39;post&#39;, 1)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This would perform a GET http://localhost:3500/posts/1</span>
</span><span class='line'><span class="nv">$ </span>ember server --proxy-port 3500
</span></code></pre></td></tr></table></div></figure>

<p>Since it&rsquo;s a proxy, you don&rsquo;t have to worry about CORS or configuring URLs
in the router. It also conveniently lets you host your API on a separate
server.</p>

<p><code>ember-cli</code>&rsquo;s api is still undergoing rapid development, but I&rsquo;ll be using it
for my future Ember projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring starts with the schema]]></title>
    <link href="http://yaymukund.github.io/blog/2014/03/09/refactoring-starts-with-the-schema/"/>
    <updated>2014-03-09T00:00:00-05:00</updated>
    <id>http://yaymukund.github.io/blog/2014/03/09/refactoring-starts-with-the-schema</id>
    <content type="html"><![CDATA[<p>I was designing a database schema for a Radio <code>Playlist</code> that contains many
<code>Track</code>s. When a <code>User</code> joins a playlist, they hear each track in order. If
they close their browser mid-song, we&rsquo;d remember the song and start again with
that song when they returned.</p>

<p>My first attempt to design tracks went something like this:</p>

<figure class='code'><figcaption><span>db/migrate/20140217211534_create_tracks.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateTracks</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:tracks</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:url</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:filetype</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:track_order</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="ss">:added_at</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">boolean</span> <span class="ss">:playing</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:playlist</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Since we&rsquo;re playing playlist tracks in order, I needed an index on
<code>track_order</code> scoped to the playlist.</p>

<figure class='code'><figcaption><span>db/migrate/20140217211534_create_tracks.rb#index</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">add_index</span><span class="p">(</span><span class="ss">:tracks</span><span class="p">,</span> <span class="o">[</span><span class="ss">:playlist_id</span><span class="p">,</span> <span class="ss">:track_order</span><span class="o">]</span><span class="p">,</span> <span class="ss">order</span><span class="p">:</span> <span class="p">{</span> <span class="n">track_order</span><span class="p">:</span> <span class="ss">:asc</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>That was a good start. Next, I decided to write a <code>play_next_track!</code> method on
the playlist:</p>

<figure class='code'><figcaption><span>app/models/playlist.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Playlist</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tracks</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="s1">&#39;tracks.track_order ASC&#39;</span><span class="p">)</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">current</span>
</span><span class='line'>      <span class="n">playing</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">current</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>        <span class="n">where</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;tracks.track_order &gt; ?&#39;</span><span class="p">,</span> <span class="n">current</span><span class="o">.</span><span class="n">track_order</span>
</span><span class='line'>        <span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">first</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_next_track!</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">play_next_track!</span>
</span><span class='line'>      <span class="n">current_track</span><span class="p">,</span> <span class="n">next_track</span> <span class="o">=</span> <span class="n">tracks</span><span class="o">.</span><span class="n">current</span><span class="p">,</span> <span class="n">tracks</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">next_track</span><span class="o">.</span><span class="n">playing</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">next_track</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">current_track</span><span class="o">.</span><span class="n">playing</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">current_track</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Track</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">current_track</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:save</span><span class="p">)</span>
</span><span class='line'>        <span class="n">next_track</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:save</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is pretty hairy code. Fetching the next track is tricky because it
depends on whether or not there&rsquo;s a current track. I also needed to wrap the
track change in a transaction to avoid a race-condition.</p>

<h2>Fixing the database schema</h2>

<p>I decided to ditch the <code>playing</code> boolean field for a <code>played_at</code> datetime field
and it magically solved all my problems.</p>

<figure class='code'><figcaption><span>app/models/playlist.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Playlist</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tracks</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="s1">&#39;tracks.track_order ASC&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_next_track!</span>
</span><span class='line'>    <span class="n">current_track</span> <span class="o">=</span> <span class="n">tracks</span><span class="o">.</span><span class="n">unplayed</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="n">current_track</span><span class="o">.</span><span class="n">played_at</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">current_track</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>I no longer need to worry about updating <code>playing=true</code> in a transaction,
finding the next track is just a matter of
<code>tracks.order(&#39;track_order ASC&#39;).where(played_at: nil).first</code>. As a bonus, I
can also easily check <code>played_at</code> to see if a track&rsquo;s been played.</p>

<p>Obviously, this kind of refactor is much easier for a small project, but it
goes to show: the right database schema can make bugs impossible at the lower
levels of your architecture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ranked-model and uniqueness constraints]]></title>
    <link href="http://yaymukund.github.io/blog/2014/03/02/rankedmodel-and-uniqueness-constraints/"/>
    <updated>2014-03-02T00:00:00-05:00</updated>
    <id>http://yaymukund.github.io/blog/2014/03/02/rankedmodel-and-uniqueness-constraints</id>
    <content type="html"><![CDATA[<p>My new Rails project deals with tracks in a sorted playlist. To do this, I
used the <a href="https://github.com/mixonic/ranked-model">ranked-model gem</a> for Rails. It lets you order records by an
integer column.</p>

<figure class='code'><figcaption><span>app/models/track.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Track</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:playlist</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># `with_same` will scope the track numbers to the playlist.</span>
</span><span class='line'>  <span class="n">ranks</span> <span class="ss">:track_order</span><span class="p">,</span> <span class="n">with_same</span><span class="p">:</span> <span class="ss">:playlist_id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>I wanted database-level protection, so I added a Postgres uniqueness constraint:</p>

<figure class='code'><figcaption><span>db/migrate/20140217211534_create_tracks.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateTracks</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>    <span class="n">reversible</span> <span class="k">do</span> <span class="o">|</span><span class="n">direction</span><span class="o">|</span>
</span><span class='line'>      <span class="n">direction</span><span class="o">.</span><span class="n">up</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">execute</span> <span class="o">&lt;&lt;-</span><span class="no">SQL</span>
</span><span class='line'><span class="sh">          ALTER TABLE tracks</span>
</span><span class='line'><span class="sh">            ADD CONSTRAINT index_tracks_on_playlist_id_and_track_order</span>
</span><span class='line'><span class="sh">            UNIQUE (playlist_id, track_order);</span>
</span><span class='line'><span class="no">        SQL</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">direction</span><span class="o">.</span><span class="n">down</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">execute</span> <span class="o">&lt;&lt;-</span><span class="no">SQL</span>
</span><span class='line'><span class="sh">          ALTER TABLE tracks</span>
</span><span class='line'><span class="sh">            DROP CONSTRAINT IF EXISTS index_tracks_on_playlist_id_and_track_order;</span>
</span><span class='line'><span class="no">        SQL</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Looks great! When I ran my tests, though, they failed:</p>

<figure class='code'><figcaption><span>rspec failure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">FFFF</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Failures</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">1</span><span class="p">)</span> <span class="no">TracksController</span> <span class="no">POST</span> <span class="sr">/tracks creates a metadata</span>
</span><span class='line'><span class="sr">     Failure/</span><span class="ss">Error</span><span class="p">:</span> <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">track</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:RecordNotUnique</span><span class="p">:</span>
</span><span class='line'>       <span class="ss">PG</span><span class="p">:</span><span class="ss">:UniqueViolation</span><span class="p">:</span> <span class="ss">ERROR</span><span class="p">:</span>  <span class="n">duplicate</span> <span class="n">key</span> <span class="n">value</span> <span class="n">violates</span> <span class="n">unique</span>
</span><span class='line'>       <span class="n">constraint</span> <span class="s2">&quot;index_tracks_on_playlist_id_and_track_order&quot;</span>
</span><span class='line'>       <span class="ss">DETAIL</span><span class="p">:</span>  <span class="no">Key</span> <span class="p">(</span><span class="n">playlist_id</span><span class="p">,</span> <span class="n">track_order</span><span class="p">)</span><span class="o">=</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span> <span class="mi">8388606</span><span class="p">)</span> <span class="n">already</span> <span class="n">exists</span><span class="o">.</span>
</span><span class='line'>       <span class="p">:</span> <span class="no">UPDATE</span> <span class="s2">&quot;tracks&quot;</span> <span class="no">SET</span> <span class="n">track_order</span> <span class="o">=</span> <span class="n">track_order</span> <span class="o">-</span> <span class="mi">1</span> <span class="no">WHERE</span> <span class="s2">&quot;tracks&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span>
</span><span class='line'>       <span class="no">IN</span> <span class="p">(</span><span class="no">SELECT</span> <span class="s2">&quot;tracks&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">FROM</span> <span class="s2">&quot;tracks&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;tracks&quot;</span><span class="o">.</span><span class="s2">&quot;playlist_id&quot;</span> <span class="o">=</span>
</span><span class='line'>       <span class="mi">27</span> <span class="no">AND</span> <span class="p">(</span><span class="s2">&quot;tracks&quot;</span><span class="o">.</span><span class="s2">&quot;track_order&quot;</span> <span class="o">&lt;=</span> <span class="mi">8388607</span><span class="p">)</span>  <span class="no">ORDER</span> <span class="no">BY</span>
</span><span class='line'>       <span class="s2">&quot;tracks&quot;</span><span class="o">.</span><span class="s2">&quot;track_order&quot;</span> <span class="no">ASC</span><span class="p">)</span>
</span><span class='line'>     <span class="c1"># ./app/controllers/tracks_controller.rb:6:in `create&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>After banging my head a bit, I finally figured it out. Internally,
<code>ranked-model</code> sets <code>track_order_position</code> to some number between -8388607 and
8388607, the <code>MEDIUMINT</code> range in MySQL. This is all
<a href="https://github.com/mixonic/ranked-model#internals">explained in the ranked-model documentation</a>. It&rsquo;s a
clever and effective way to avoid constantly rearranging records.</p>

<p>Sometimes, it <em>does</em> need to rearrange records, though. When it does, it
calls <code>rearrange_ranks</code>:</p>

<figure class='code'><figcaption><span>lib/ranked-model/ranker.rb</span><a href='https://github.com/mixonic/ranked-model/blob/fad88ca2a31d804c4af083c8199c83ee5c5e5d48/lib/ranked-model/ranker.rb#L171-193'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rearrange_ranks</span>
</span><span class='line'>  <span class="n">_scope</span> <span class="o">=</span> <span class="n">finder</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">instance</span><span class="o">.</span><span class="n">id</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="c1"># Never update ourself, shift others around us.</span>
</span><span class='line'>    <span class="n">_scope</span> <span class="o">=</span> <span class="n">_scope</span><span class="o">.</span><span class="n">where</span><span class="p">(</span> <span class="n">instance_class</span><span class="o">.</span><span class="n">arel_table</span><span class="o">[</span><span class="n">instance_class</span><span class="o">.</span><span class="n">primary_key</span><span class="o">].</span><span class="n">not_eq</span><span class="p">(</span><span class="n">instance</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">current_first</span><span class="o">.</span><span class="n">rank</span> <span class="o">&amp;&amp;</span> <span class="n">current_first</span><span class="o">.</span><span class="n">rank</span> <span class="o">&gt;</span> <span class="ss">RankedModel</span><span class="p">:</span><span class="ss">:MIN_RANK_VALUE</span> <span class="o">&amp;&amp;</span> <span class="n">rank</span> <span class="o">==</span> <span class="ss">RankedModel</span><span class="p">:</span><span class="ss">:MAX_RANK_VALUE</span>
</span><span class='line'>    <span class="n">_scope</span><span class="o">.</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span> <span class="n">instance_class</span><span class="o">.</span><span class="n">arel_table</span><span class="o">[</span><span class="n">ranker</span><span class="o">.</span><span class="n">column</span><span class="o">].</span><span class="n">lteq</span><span class="p">(</span><span class="n">rank</span><span class="p">)</span> <span class="p">)</span><span class="o">.</span>
</span><span class='line'>      <span class="n">update_all</span><span class="p">(</span> <span class="sx">%Q{</span><span class="si">#{</span><span class="n">ranker</span><span class="o">.</span><span class="n">column</span><span class="si">}</span><span class="sx"> = </span><span class="si">#{</span><span class="n">ranker</span><span class="o">.</span><span class="n">column</span><span class="si">}</span><span class="sx"> - 1}</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">current_last</span><span class="o">.</span><span class="n">rank</span> <span class="o">&amp;&amp;</span> <span class="n">current_last</span><span class="o">.</span><span class="n">rank</span> <span class="o">&lt;</span> <span class="p">(</span><span class="ss">RankedModel</span><span class="p">:</span><span class="ss">:MAX_RANK_VALUE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">rank</span> <span class="o">&lt;</span> <span class="n">current_last</span><span class="o">.</span><span class="n">rank</span>
</span><span class='line'>    <span class="n">_scope</span><span class="o">.</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span> <span class="n">instance_class</span><span class="o">.</span><span class="n">arel_table</span><span class="o">[</span><span class="n">ranker</span><span class="o">.</span><span class="n">column</span><span class="o">].</span><span class="n">gteq</span><span class="p">(</span><span class="n">rank</span><span class="p">)</span> <span class="p">)</span><span class="o">.</span>
</span><span class='line'>      <span class="n">update_all</span><span class="p">(</span> <span class="sx">%Q{</span><span class="si">#{</span><span class="n">ranker</span><span class="o">.</span><span class="n">column</span><span class="si">}</span><span class="sx"> = </span><span class="si">#{</span><span class="n">ranker</span><span class="o">.</span><span class="n">column</span><span class="si">}</span><span class="sx"> + 1}</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">current_first</span><span class="o">.</span><span class="n">rank</span> <span class="o">&amp;&amp;</span> <span class="n">current_first</span><span class="o">.</span><span class="n">rank</span> <span class="o">&gt;</span> <span class="ss">RankedModel</span><span class="p">:</span><span class="ss">:MIN_RANK_VALUE</span> <span class="o">&amp;&amp;</span> <span class="n">rank</span> <span class="o">&gt;</span> <span class="n">current_first</span><span class="o">.</span><span class="n">rank</span>
</span><span class='line'>    <span class="n">_scope</span><span class="o">.</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span> <span class="n">instance_class</span><span class="o">.</span><span class="n">arel_table</span><span class="o">[</span><span class="n">ranker</span><span class="o">.</span><span class="n">column</span><span class="o">].</span><span class="n">lt</span><span class="p">(</span><span class="n">rank</span><span class="p">)</span> <span class="p">)</span><span class="o">.</span>
</span><span class='line'>      <span class="n">update_all</span><span class="p">(</span> <span class="sx">%Q{</span><span class="si">#{</span><span class="n">ranker</span><span class="o">.</span><span class="n">column</span><span class="si">}</span><span class="sx"> = </span><span class="si">#{</span><span class="n">ranker</span><span class="o">.</span><span class="n">column</span><span class="si">}</span><span class="sx"> - 1}</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">rank_at</span><span class="p">(</span> <span class="n">rank</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">rebalance_ranks</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>The details of this code aren&rsquo;t important, but notice that it sometimes
calls <code>update_all</code> to increment or decrement a group of records. This triggers
Postgres&rsquo;s uniqueness constraint and the record fails validation.</p>

<p>To fix this, we need to make the uniqueness constraint <em>deferrable</em>:</p>

<figure class='code'><figcaption><span>db/migrate/20140217211534_create_tracks.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ALTER</span> <span class="no">TABLE</span> <span class="n">tracks</span>
</span><span class='line'>  <span class="no">ADD</span> <span class="no">CONSTRAINT</span> <span class="n">index_tracks_on_playlist_id_and_track_order</span>
</span><span class='line'>  <span class="no">UNIQUE</span> <span class="p">(</span><span class="n">playlist_id</span><span class="p">,</span> <span class="n">track_order</span><span class="p">)</span> <span class="no">DEFERRABLE</span> <span class="no">INITIALLY</span> <span class="no">IMMEDIATE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>And then we actually need to defer the constraint when rearranging records:</p>

<figure class='code'><figcaption><span>app/models/track.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Track</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_save</span> <span class="ss">:defer_uniqueness_constraint_if_track_order_changed</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">defer_uniqueness_constraint_if_track_order_changed</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">new_record?</span> <span class="ow">or</span> <span class="n">track_order_changed?</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span> <span class="o">&lt;&lt;-</span><span class="no">SQL</span>
</span><span class='line'><span class="sh">        SET CONSTRAINTS</span>
</span><span class='line'><span class="sh">          index_tracks_on_playlist_id_and_track_order DEFERRED;</span>
</span><span class='line'><span class="no">      SQL</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>And suddenly, all my tests passed. Hooray!</p>

<h2>References</h2>

<ul>
<li><a href="http://hashrocket.com/blog/posts/deferring-database-constraints">http://hashrocket.com/blog/posts/deferring-database-constraints</a></li>
<li><a href="https://github.com/mixonic/ranked-model">https://github.com/mixonic/ranked-model</a></li>
<li><a href="http://www.postgresql.org/docs/9.3/static/sql-set-constraints.html">http://www.postgresql.org/docs/9.3/static/sql-set-constraints.html</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
